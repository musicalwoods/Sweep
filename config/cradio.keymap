/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

&mmv {
   time-to-max-speed-ms = <680>;
   acceleration-exponent=<2>;
};
/ { 


    behaviors {
    hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RALT>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp TAB>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LALT>;
        };
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp LGUI>;
        };
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RGUI>;
        };
        

        
    };

        keymap {
                compatible = "zmk,keymap";
                
       	default_layer {
		bindings = <
		&kp Y  &kp C  &kp L  &kp M             &kp K 			&kp Z          &kp F  &kp U            &td COMMA MINUS  &td SQT SEMI
		&kp I  &kp S  &kp R  &kp T             &kp G 			&kp P          &kp N  &kp E            &kp A            &kp O
		&kp Q  &kp V  &kp W  &kp D             &kp J			&kp B          &kp H  &td SLASH UNDER  &td DOT EXCL     &kp X
          				     &mt LSHIFT SPACE  &td LSHIFT LGUI	&td RCTL RALT  &to 1 
		>;
		};

       	left_layer {
		bindings = <
		&kp LA(TAB)  &kp HOME     &kp UP    &kp END        &kp BSPC			&td UNDER EQUAL &kp NUM_7  &kp NUM_8  &kp NUM_9  &kp BSPC 
		&kp TAB      &kp LEFT     &kp DOWN  &kp RIGHT      &kp DEL 			&td MINUS PLUS  &kp NUM_4  &kp NUM_5  &kp NUM_6  &to 2 
		&kp ESC      &kp LC(LEFT) &kp K_APP &kp LC(RIGHT)  &kp RET    		&td SLASH STAR  &kp NUM_1  &kp NUM_2  &kp NUM_3  &kp RET 
					                        &to 0          &trans  			&trans          &kp NUM_0
		>;
		};
		
		right_layer {
		bindings = <
		&kp EXCL    &kp AT       &kp HASH  &kp DLLR     &kp PRCNT      	&kp CARET  &kp AMPS      &kp STAR  &kp LPRN  &kp BSPC 
		&kp GRAVE   &kp TILDE    &kp PG_DN &kp PG_UP    &kp BSLH  	    &kp LPAR   &kp RPAR      &kp LBRC  &kp RBRC  &kp DEL
		&kp K_MUTE  &kp K_VOL_DN &kp K_PP  &kp K_VOL_UP &none  	        &kp LT     &kp GT        &kp LBKT  &kp RBKT  &kp RET
					                       &to 0        &trans  	   	&trans     &to 3 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp F1      &kp F2      &kp F3      &kp F4     &bt BT_SEL 0     &bt BT_CLR  &kp F13    &kp F14         &kp F15    &kp F16
		&kp F5      &kp F6      &kp F7      &kp F8     &bt BT_SEL 1     &bt BT_NXT  &kp F17    &kp F18         &kp F19    &kp F20
		&kp F9      &kp F10     &kp F11     &kp F12    &bt BT_SEL 2     &bt BT_PRV  &kp PSCRN  &kp PAUSE_BREAK &kp SLCK   &kp INS   
					                        &to 0      &trans  			&trans      &kp RALT 
		>;
		};	
        
	};
};
